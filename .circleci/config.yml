version: 2.1
orbs:
  #それぞれの処理に必要なjobsやcommands等の処理を予めパッケージ化したもの
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@2.2.1
  aws-cli: circleci/aws-cli@2.0.3

#jobsで使用する実行環境を設定 キャッシュの有効化
executors:
  defalut:
    # dockerhubから既存のイメージをpullする（circleci/ruby2.6.6 circleci/mysql5.7）
    docker:
      - image: circleci/ruby:2.6.6-node
      #CI/CD上で使用するrubyのイメージを作成
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          TZ: "Japan"
      - image: circleci/mysql:5.7
       #CI/CD上で使用するrubyのイメージを作成
        environment:
          #「%」は全てのホストを差す
          MYSQL_ROOT_HOST: '%'
          #CI/CD上のMysqlへの接続パスワードは「空」であることを差す
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'



commands:
  bundle_install_rspec:
    steps:
      - run:
        #bundlerのバージョン確認
          name: Which bundler?
          command: bundle -v
      #save_cacheでキャッシュを保存していれば次回以降の読み込みが早くなり、ジョブが高速化
      - restore_cache:
          keys:
            - rails-cache-gem-v3-{{ checksum "Gemfile.lock" }}
            - rails-cache-gem-v3-
 
      - run:
        #Gemfile内の依存関係を現在インストールされているGemが満たされていることを確認、gemのインストール
          name: Bundle Install
          command: bundle check || bundle install
 
      #Gemfile.lockをキャッシュとして保存
      - save_cache:
          #キャッシュ名を設定する
          key: rails-cache-gem-v3-{{ checksum "Gemfile.lock" }}
          #キャッシュするファイルの指定。working_directoryから相対的な位置にあるパスを示す。
          paths:
            - vendor/bundle

      - run:
        #テスト用DBの作成
          name: Database create
          command: DISABLE_SPRING=true bin/rails db:create RAILS_ENV=test --trace

      - run:
        #スキーマファイルを元にして既にテータベースがある場合は一旦テーブルを削除して作り直す
          name: Database setup
          command: DISABLE_SPRING=true bin/rails db:schema:load RAILS_ENV=test --trace

      - run:
        #rspecの実行
          name: Run rspec
          command: |
            TZ=Asia/Tokyo \
              bundle exec rspec --profile 10 \
                                --out test_results/rspec.xml \
                                --format progress \
                                $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
 

# prd
jobs:
  rspec:
    working_directory: ~/local_docker_rails/food_sharing_service
    executor: defalut
    environment:
      RAILS_ENV: test
      #CI/CD上のMysqlへの接続はユーザーを予め設定していわけではないためrootユーザーでアクセス
      DB_HOST: '127.0.0.1'
      DB_USERNAME: 'root'
      DB_PASSWORD: ''
      MYSQL_DATABASE: 'food_share_app_database_test'
    steps:
      #ソースコードを作業ディレクトリにチェックアウトするステップ (github上のコードを持ってくる)
      - checkout
      - bundle_install_rspec
  deploy_app_prd:
    working_directory: ~/local_docker_rails/food_sharing_service
    executor: defalut
    environment:
        RAILS_ENV: prd
        DB_HOST: $PRD_MYSQL_HOST
        DB_USERNAME: $PRD_MYSQL_USER
        DB_PASSWORD: $PRD_MYSQL_PASSWORD
        MYSQL_DATABASE: $PRD_MYSQL_DATABASE
        ECS_PARAM_FAMILY: AWS_ECS_APP_NAME_TASKDEF
        ECS_PARAM_CLUSTER_NAME: '${AWS_ECS_APP_NAME}-cluster'
        ECS_PARAM_SERVICE_NAME: '${AWS_ECS_APP_NAME}-serv'
    steps:
      # セキュリティのため各ビルドに独立したリモート環境を作成し、その上でdockerコマンドが実行される
      - setup_remote_docker
      # #ソースコードを作業ディレクトリにチェックアウトするステップ (github上のコードを持ってくる)
      - checkout
      - run:
          name: aws-cli package download
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip" -o "awscliv2.zip"
      - run:
          name: aws-cli v2.0.3 install
          command: |
            unzip awscliv2.zip \
            && sudo ./aws/install \
            && rm awscliv2.zip
      # aws configureコマンドでaws認証情報を設定
      - run:
          name: setting and configure
          command: |
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID} \
            && aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
      # aws s3バケットからenvファイルをテス環境のenvファイルにコピー
      - run:
          name: download .env
          command: |
            aws s3 cp s3://food-sharing-service-env/.env .env
    #実行可能なコマンド集合
      - aws-ecr/build-and-push-image:
      # Dockerfileのイメージをビルドし、ECRへのプッシュ(orbs「circleci/aws-ecr」の中にある既存の処理に値を置換)
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_REGION
          #作成したECRのリポジトリ名
          repo: food-share-app-ecs-repogitory
          #buildしたいDockerfileを指定
          dockerfile: docker/prd/app/Dockerfile
          tag: "$CIRCLE_SHA1"
      - aws-ecs/update-service:
      # 新しいDockerイメージを既存のECSサービスにデプロイする(orbs「circleci/aws-ecs」の中の既存の処理に値を置換）
          # ECSのタスク定義
          family: AWS_ECS_APP_NAME_TASKDEF
          service-name: '${AWS_ECS_APP_NAME}-serv'
          cluster-name: '${AWS_ECS_APP_NAME}-cluster'
          #タスク定義内で定義したコンテナURLの更新
          container-image-name-updates: 'container=${AWS_ECS_APP_NAME}-nginx-rails-container,image-and-tag=${AWS_ECR_ACCOUNT_URL}/food-share-app-ecs-repogitory:${CIRCLE_SHA1}'
      - aws-ecs/run-task:
      # タスクの立ち上げ
          cluster: '${AWS_ECS_APP_NAME}-cluster'
          task-definition: AWS_ECS_APP_NAME_TASKDEF
          #クラスターに配置する指定されたタスクのインスタンス化の数
          count: 1
          #タスクを実行するタイプ（EC2 or Fargate）
          launch-type: FARGATE
          awsvpc: true
          subnet-ids: AWS_SUBNET_ID_NUMBER_ONE,AWS_SUBNET_ID_NUMBER_TWO
          security-group-ids: AWS_SECURITY_GROUP_ID
          overrides: "{\"containerOverrides\":[{\"name\": \"${AWS_ECS_APP_NAME_TASKDEF}\",\"command\": [\"bundle\", \"exec\", \"rails\", \"db:migrate\", \"RAILS_ENV=prd\"]}]}"


workflows:
  version: 2
  rspec_deploy_prd:
    jobs:
      - rspec
      - deploy_app_prd:
          requires:
            - rspec
          filters:
            branches:
              only:
                - master
                - circleci