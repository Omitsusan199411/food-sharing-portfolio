# 前提として、このファイルで記載しているディレクティブは全てhttpモジュール内として適用される（include /etc/nginx/conf.d/*.conf;）

# upstreamディレクティブで仮想サーバーグループを命名する。
# unicorn.rb(APサーバー)内のlistenのパスとnginxソケットパスを一致させる。unixドメインソケットで通信。nginxが指定パスunicorn.sockへアップストリーム（通信）する
upstream app {
  # 転送先（バックエンド：railsアプリケーション）への接続を定義する。
  server unix:/var/www/app/tmp/sockets/unicorn.sock;
}

# HTTPリクエストに応える仮想サーバー（バーチャルホスト）を設定。必ずhttpモジュール内に定義すること。複数のserverディレクティブを用意することで区切った単位で仮想サーバーを作成することができる。
# 定義したupstreamのサーバーグループに関して、仮想サーバーとしての詳細処理を記載する。
server {
  # listenとserver_nameはこの仮想サーバーにアクセスするための情報。listenには接続するポート番号とIPアドレス（今回はIPアドレス省略のため全てのアドレスが対象）、server_nameには仮想サーバの名前（AWSで設定したサイトのドメイン名）を記載する。
  listen 80;
  server_name www.foodshareapp-production.org;
  #httpモジュール（Webサーバー）に関連するアクセスログとエラーログの出力について。標準出力・標準エラーとして出力する。
  access_log  /dev/stdout  main;
  error_log  /dev/stderr  warn;
  # 仮想サーバにアクセスした際のドキュメントルートを指定する。以下のディレクトリに404.htmlファイルなどが含まれている。
  # 静的ページが存在するパスを指定する。下記の場合、全てのlocationパスに適用される。（locationごとにドキュメントルートを作成することも可能）
  # railsではassets配下の静的ファイルは一度プリコンパイルされて、public配下に静的ファイルが保存されブラウザに渡されるため、ドキュメントルートは/var/www/app/publicとなる。
  # root /var/www/app/public;
  root /var/www/app/app/views/products/index.html.haml
# ユーザーがアクセスしたURI(URL)ごとに処理や見せるサイトを変えられる。以下の場合、全てのURI(/)が適用範囲となる
  location / {
        # バックエンドサーバーに送信するヘッダ情報を定義し直す。
        proxy_set_header Host $http_host;
        # $remote_addrはアクセスしてきたクライアントのIPアドレスを示す
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Client-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        # nginxからunicornへのコネクションを張る際のタイムアウト時間を示す
        proxy_connect_timeout 60;
        # nginxからunicornに対してデータを送信する際のタイムアウトの値を示す
        proxy_send_timeout    60;
        # unicornに処理させる場合に想定される最大時間。unicornのタイムアウト時間よりも長い設定時間にしておく必要がある。
        proxy_read_timeout    60;
        send_timeout          60;
        # 上記で設定したupstream名称（ここではapp）をパス名称として記載することでユーザーリクエストに対してunicornソケットに通信させる。
        # リバースプロキシとして使用する場合は、proxy_passは先に定義する必要がある。ただし、unicornなどのソケット通信などの場合は後ろに記載しても問題はない。
        proxy_pass http://app;
  }
  # Nginxが受信できるデータの最大値を表す。下記の場合、100MB以下のサイズのデータを受信できる。「client intended to send too large bodyエラーに関係する」
  client_max_body_size 100m;
  # 特定のエラーコードの応答として内部リダイレクトするページを示す。
  error_page 404             /404.html;
  error_page 505 502 503 504 /500.html;
  # クライアントからのリクエストに対してアクセス先の優先順位を決める。
  # 指定のファイルが存在するかを左から探しに行く。$uriは埋め込み変数（nginxが用意している変数）であり、リクエスト中のURIを表す。
  # 処理の流れとしては、URIのパスに対する静的ページ$uri/indexや$uri）があれば、そのファイルをレスポンスとして返す。なければ、@app（stream app）に内部リダイレクト、動的ページを返す。
  try_files  $uri/index.html $uri @app;
  keepalive_timeout 5;
}